-- ----------------------------------------------------------------------------
-- Step #3: Create the database level objects
-- ----------------------------------------------------------------------------
USE ROLE R_LYRICS_ANALYSIS;
USE WAREHOUSE WH_LYRICS_ANALYSIS;
USE DATABASE DB_LYRICS_ANALYSIS;

-- Schemas
CREATE OR REPLACE SCHEMA RAW_DATA;
CREATE OR REPLACE SCHEMA NORMALIZED;
CREATE OR REPLACE SCHEMA ANALYTICS;

-- ----------------------------------------------------------------------------
-- Step #1: Stage
-- ----------------------------------------------------------------------------
USE SCHEMA RAW_DATA;
--File Format
CREATE OR REPLACE FILE FORMAT CSV_FILE_FORMAT
  TYPE = 'CSV'
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  TIMESTAMP_FORMAT = 'AUTO'
  DATE_FORMAT = 'AUTO'
  SKIP_HEADER = 1
  TIME_FORMAT = 'AUTO'
  TRIM_SPACE = TRUE
  NULL_IF = ('\\N')
  ESCAPE = '\\'
  COMPRESSION = NONE
  ENCODING = UTF8;

--Stage
CREATE OR REPLACE STAGE word_counts_stage_external
  URL='s3://lyrics-word-dashboard-raw/csv/'
  STORAGE_INTEGRATION = s3_integration
  FILE_FORMAT = ( FORMAT_NAME = 'CSV_FILE_FORMAT' );
LIST @word_counts_stage_external;
-- ----------------------------------------------------------------------------
-- Step #3a: Create RAW_DATA Objects
-- ----------------------------------------------------------------------------
USE SCHEMA RAW_DATA;

CREATE OR REPLACE TABLE SRC_LYRICS (
	TRACK_ID varchar(255),
	WORD varchar(255),
	COUNT varchar(255)
);

CREATE OR REPLACE TABLE SRC_GENRES (
	TRACK_ID varchar(255),
	GENRE varchar(255)
);

CREATE OR REPLACE TABLE SRC_WORDS (
	STEMMED varchar(255),
	UNSTAMMED varchar(255)
);

CREATE OR REPLACE TABLE SRC_SONGS (
	MSD_TRACK_ID varchar(255),
	MSD_ARTIST_NAME varchar(255),
	MSD_TITLE varchar(255),
	MXM_TRACK_ID varchar(255),
	MXM_ARTIST_NAME varchar(255),
	MXM_TITLE varchar(255)
);

CREATE OR REPLACE TABLE STG_SONGS (
	MSD_TRACK_ID varchar(255) NOT NULL,
	MSD_ARTIST_NAME varchar(255) NOT NULL,
	MSD_TITLE varchar(255) NOT NULL,
	MXM_TRACK_ID varchar(255) NOT NULL,
	MXM_ARTIST_NAME varchar(255) NOT NULL,
	MXM_TITLE varchar(255) NOT NULL,
	INSERT_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	INSERT_BY varchar(255) NOT NULL,
	CONSTRAINT PK_STG_SONGS PRIMARY KEY (MSD_TRACK_ID,MXM_TRACK_ID,INSERT_DT)
);

CREATE OR REPLACE TABLE STG_LYRICS (
	TRACK_ID varchar(255) NOT NULL,
	WORD varchar(255) NOT NULL,
	COUNT bigint NOT NULL,
	INSERT_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	INSERT_BY varchar(255) NOT NULL,
	CONSTRAINT PK_STG_LYRICS PRIMARY KEY (TRACK_ID,WORD,INSERT_DT)
);

CREATE OR REPLACE TABLE STG_WORDS (
	WORD_CODE varchar(255) NOT NULL,
	WORD_NAME varchar(255) NOT NULL,
	INSERT_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	INSERT_BY varchar(255) NOT NULL,
	CONSTRAINT PK_STG_WORDS PRIMARY KEY (WORD_CODE,INSERT_DT)
);

CREATE OR REPLACE TABLE STG_GENRES (
	TRACK_ID varchar(255) NOT NULL,
	GENRE varchar(255) NOT NULL,
	INSERT_DT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	INSERT_BY varchar(255) NOT NULL,
	CONSTRAINT PK_STG_GENRES PRIMARY KEY (TRACK_ID,GENRE,INSERT_DT)
);

-- ----------------------------------------------------------------------------
-- Step #3b: Create NORMALIZED Objects
-- ----------------------------------------------------------------------------
USE SCHEMA NORMALIZED;

CREATE OR REPLACE STREAM STR_STG_SONGS ON TABLE RAW_DATA.STG_SONGS;
CREATE OR REPLACE STREAM STR_STG_LYRICS ON TABLE RAW_DATA.STG_LYRICS;
CREATE OR REPLACE STREAM STR_STG_WORDS ON TABLE RAW_DATA.STG_WORDS;
CREATE OR REPLACE STREAM STR_STG_GENRES ON TABLE RAW_DATA.STG_GENRES;


CREATE OR REPLACE SEQUENCE SEQ_ARTIST_ID;
CREATE OR REPLACE SEQUENCE SEQ_WORD_ID;
CREATE OR REPLACE SEQUENCE SEQ_GENRE_ID;
CREATE OR REPLACE SEQUENCE SEQ_SONG_ID;

CREATE OR REPLACE TABLE T_ARTISTS (
	ARTIST_ID bigint NOT NULL DEFAULT SEQ_ARTIST_ID.NEXTVAL,
	ARTIST_CODE varchar(255) NOT NULL,
	ARTIST_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_T_ARTISTS PRIMARY KEY (ARTIST_ID)
);
INSERT INTO T_ARTISTS VALUES(-1, 'ND', 'ND');

CREATE OR REPLACE TABLE T_WORDS (
	WORD_ID bigint NOT NULL DEFAULT SEQ_WORD_ID.NEXTVAL,
	WORD_CODE varchar(255) NOT NULL,
	WORD_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_T_WORDS PRIMARY KEY (WORD_ID)
);
INSERT INTO T_WORDS VALUES(-1, 'ND', 'ND');

CREATE OR REPLACE TABLE T_GENRES (
	GENRE_ID bigint NOT NULL DEFAULT SEQ_GENRE_ID.NEXTVAL,
	GENRE_CODE varchar(255) NOT NULL,
	GENRE_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_T_GENRES PRIMARY KEY (GENRE_ID)
);
INSERT INTO T_GENRES VALUES(-1, 'ND', 'ND');

CREATE OR REPLACE TABLE T_SONGS (
	SONG_ID bigint NOT NULL DEFAULT SEQ_SONG_ID.NEXTVAL,
	ARTIST_ID bigint NOT NULL,
	GENRE_ID bigint NOT NULL,
	SONG_CODE varchar(255) NOT NULL,
	SONG_TITLE varchar(255) NOT NULL,
	CONSTRAINT PK_T_SONGS PRIMARY KEY (SONG_ID)
);

INSERT INTO T_SONGS VALUES(-1, -1, -1, 'ND', 'ND');

ALTER TABLE T_SONGS ADD FOREIGN KEY (ARTIST_ID) REFERENCES T_ARTISTS(ARTIST_ID);

ALTER TABLE T_SONGS ADD FOREIGN KEY (GENRE_ID) REFERENCES T_GENRES(GENRE_ID);

CREATE OR REPLACE TABLE T_LYRICS (
	SONG_ID bigint NOT NULL,
	WORD_ID bigint NOT NULL,
	COUNT INT NOT NULL,
	CONSTRAINT PK_T_LYRICS PRIMARY KEY (SONG_ID,WORD_ID)
);

ALTER TABLE T_LYRICS ADD FOREIGN KEY (SONG_ID) REFERENCES T_SONGS(SONG_ID);

ALTER TABLE T_LYRICS ADD FOREIGN KEY (WORD_ID) REFERENCES T_WORDS(WORD_ID);

CREATE OR REPLACE VIEW VW_LYRICS as 
SELECT
        T_LYRICS.SONG_ID,
        T_ARTISTS.ARTIST_ID,
        T_GENRES.GENRE_ID,
        T_LYRICS.WORD_ID,
        T_LYRICS.COUNT
FROM T_LYRICS
JOIN T_SONGS ON T_LYRICS.SONG_ID = T_SONGS.SONG_ID
JOIN T_ARTISTS ON T_SONGS.ARTIST_ID = T_ARTISTS.ARTIST_ID
JOIN T_GENRES ON T_SONGS.GENRE_ID = T_GENRES.GENRE_ID
;
-- ----------------------------------------------------------------------------
-- Step #3c: Create ANALYTICS Objects
-- ----------------------------------------------------------------------------
USE SCHEMA ANALYTICS;
CREATE OR REPLACE STREAM STR_T_SONGS ON TABLE NORMALIZED.T_SONGS;
CREATE OR REPLACE STREAM STR_VW_LYRICS ON VIEW NORMALIZED.VW_LYRICS;
CREATE OR REPLACE STREAM STR_T_WORDS ON TABLE NORMALIZED.T_WORDS;
CREATE OR REPLACE STREAM STR_T_GENRES ON TABLE NORMALIZED.T_GENRES;
CREATE OR REPLACE STREAM STR_T_ARTISTS ON TABLE NORMALIZED.T_ARTISTS;

CREATE OR REPLACE TABLE DIM_SONGS (
	SONG_ID bigint NOT NULL,
	SONG_CODE varchar(255) NOT NULL,
	SONG_TITLE varchar(255) NOT NULL,
	CONSTRAINT PK_DIM_SONGS PRIMARY KEY (SONG_ID)
);

CREATE OR REPLACE TABLE DIM_GENRES (
	GENRE_ID bigint NOT NULL,
	GENRE_CODE varchar(255) NOT NULL,
	GENRE_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_DIM_GENRES PRIMARY KEY (GENRE_ID)
);

CREATE OR REPLACE TABLE DIM_ARTISTS (
	ARTIST_ID bigint NOT NULL,
	ARTIST_CODE varchar(255) NOT NULL,
	ARTIST_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_DIM_ARTISTS PRIMARY KEY (ARTIST_ID)
);

CREATE OR REPLACE TABLE DIM_WORDS (
	WORD_ID bigint NOT NULL,
	WORD_CODE varchar(255) NOT NULL,
	WORD_NAME varchar(255) NOT NULL,
	CONSTRAINT PK_DIM_WORDS PRIMARY KEY (WORD_ID)
);

CREATE OR REPLACE TABLE FCT_LYRICS_WORD_COUNTS (
	SONG_ID bigint NOT NULL,
	ARTIST_ID bigint NOT NULL,
	GENRE_ID bigint NOT NULL,
	WORD_ID bigint NOT NULL,
	WORD_COUNT INT NOT NULL,
	CONSTRAINT PK_FCT_LYRICS_WORD_COUNTS PRIMARY KEY (SONG_ID,ARTIST_ID,GENRE_ID,WORD_ID)
);

ALTER TABLE FCT_LYRICS_WORD_COUNTS ADD FOREIGN KEY (SONG_ID) REFERENCES DIM_SONGS(SONG_ID);

ALTER TABLE FCT_LYRICS_WORD_COUNTS ADD FOREIGN KEY (ARTIST_ID) REFERENCES DIM_ARTISTS(ARTIST_ID);

ALTER TABLE FCT_LYRICS_WORD_COUNTS ADD FOREIGN KEY (GENRE_ID) REFERENCES DIM_GENRES(GENRE_ID);

ALTER TABLE FCT_LYRICS_WORD_COUNTS ADD FOREIGN KEY (WORD_ID) REFERENCES DIM_WORDS(WORD_ID);

CREATE OR REPLACE VIEW VW_LYRICS_WORD_COUNTS AS 
SELECT 
* 
FROM FCT_LYRICS_WORD_COUNTS
WHERE GENRE_ID != -1;